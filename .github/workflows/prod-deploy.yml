name: Deploy to prod

on:
  workflow_dispatch:
  schedule:
    # Weekdays Mon-Fri @ 18:00 UTC (10AM PST [winter] / 11AM PDT [summer])
    - cron: '0 18 * * 1-5'
permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  run-staging-e2e-test:
    name: Run e2e test on staging
    uses: chanzuckerberg/cryoet-data-portal/.github/workflows/frontend-e2e-tests.yml@main
    secrets: inherit
    # The secret IS_DEPLOY_ALLOWED is used to manually gate the prod deploys
    if: ${{ secrets.IS_DEPLOY_ALLOWED == 'true' }}
    with:
      environment: staging

  create-frontend-release:
    concurrency:
      group: create-frontend-release-${{ github.ref }}
      cancel-in-progress: true

    outputs:
      pr: ${{ steps.release.outputs.pr }}
      prs_created: ${{ steps.release.outputs.prs_created }}

    name: generate frontend changelog
    runs-on: ubuntu-latest
    needs: run-staging-e2e-test
    if: ${{ (github.repository == 'chanzuckerberg/cryoet-data-portal') }}
    steps:
      - name: create changelog
        uses: google-github-actions/release-please-action@v4
        id: release
        with:
          # TODO Configuring using manifest file as workaround until we move the frontend to its own repo
          config-file: release-please.config.json
          manifest-file: release-please.manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

  tag-frontend-release:
    concurrency:
      group: tag-frontend-release-${{ github.ref }}
      cancel-in-progress: true

    outputs:
      tag: frontend-v${{ steps.extract-version.outputs.result }}

    name: tag frontend release
    runs-on: ubuntu-latest
    if: ${{ (github.repository == 'chanzuckerberg/cryoet-data-portal') && (needs.create-frontend-release.outputs.prs_created == 'true') }}
    needs: create-frontend-release
    steps:
      - name: merge release PR
        uses: actions/github-script@v7
        id: merge-release-pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const pr = ${{ needs.create-frontend-release.outputs.pr }}
            console.log(`Merging release PR #${pr.number}`)

            const [owner, repo] = '${{ github.repository }}'.split('/')

            const [mergeResponse] = await Promise.all([
              github.rest.pulls.merge({
                owner,
                repo,
                pull_number: pr.number,
                merge_method: 'squash',
              }),

              github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: pr.number,
                name: 'autorelease: pending'
              }),

              github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr.number,
                labels: ['autorelease: tagged']
              }),
            ])

            return mergeResponse.data.sha

      - name: checkout repo for tagging
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.merge-release-pr.outputs.result }}

      - name: extract version
        id: extract-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const pr = ${{ needs.create-frontend-release.outputs.pr }}
            const version = pr.title.split(' ').at(-1)
            return version

      - name: tag release
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git tag -a frontend-v${{ steps.extract-version.outputs.result }} -m "Release frontend v${{ steps.extract-version.outputs.result }}"
          git push origin frontend-v${{ steps.extract-version.outputs.result }}

  deploy-to-prod:
    concurrency:
      group: prod-frontend-deploy-${{ github.ref }}
      cancel-in-progress: true
    name: deploy prod branch
    runs-on: ubuntu-latest
    needs: [create-frontend-release, tag-frontend-release]
    environment: prod
    if: ${{ (github.repository == 'chanzuckerberg/cryoet-data-portal') && (needs.create-frontend-release.outputs.prs_created == 'true') }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-aws-account-id: true
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
      - name: Create or update stack
        uses: chanzuckerberg/github-actions/.github/actions/deploy-happy-stack@v1.24.0
        env:
          # Force using BuildKit instead of normal Docker, required so that metadata
          # is written/read to allow us to use layers of previous builds as cache.
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_REPO: ${{ secrets.ECR_REPO }}/
          ENV: prod
        with:
          stack-name: frontend
          create-tag: true
          tag: ${{ env.STACK_NAME }}
          tfe-token: ${{ secrets.TFE_TOKEN }}
          working-directory: ./frontend
          env: prod
          operation: create-or-update
          github-repo-branch: ${{ needs.tag-frontend-release.outputs.tag }}

  run-prod-e2e-test:
    name: Run e2e test on staging
    needs: deploy-to-prod
    uses: chanzuckerberg/cryoet-data-portal/.github/workflows/frontend-e2e-tests.yml@main
    secrets: inherit
    with:
      environment: prod
